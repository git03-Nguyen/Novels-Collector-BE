using NovelsCollector.Domain.Entities.Plugins.Exporters;
using NovelsCollector.Domain.Resources.Novels;
using QuickEPUB;
using System.Reflection;

namespace Exporter.SimpleEPub
{
    public class SimpleEPub : IExporterFeature
    {
        public SimpleEPub() { }

        public async Task Export(Novel novel, Stream stream)
        {
            if (novel == null || novel.Chapters == null || novel.Chapters.Length == 0)
            {
                throw new ArgumentNullException(nameof(novel));
            }

            var title = (novel.Title != null) ? novel.Title : "Không tựa đề";
            var author = (novel.Authors != null && novel.Authors.Length > 0) ? novel.Authors[0].Name : "Khuyết danh";
            var categories = (novel.Categories != null && novel.Categories.Length > 0) ?
                string.Join(" | ", novel.Categories.Take(3).Select(c => c.Title)) :
                "Không thể loại";
            var startChapter = (novel.Chapters != null && novel.Chapters.Length > 0) ? novel.Chapters[0].Number : 1;
            var lastChapter = (novel.Chapters != null && novel.Chapters.Length > 0) ? novel.Chapters[^1].Number : 1;
            var chaptersRange = (startChapter == lastChapter) ? $"Chương {startChapter}" : $"Chương {startChapter} - Chương {lastChapter}";
            var source = (novel.Source != null) ? novel.Source : "Không rõ";

            // Create an Epub instance
            var doc = new Epub(title, author);

            var rootPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var pathToCss = Path.Combine(rootPath, "custom.css");

            // Add the CSS file referenced in the HTML content
            using (var cssStream = new FileStream(pathToCss, FileMode.Open))
            {
                doc.AddResource("custom.css", EpubResourceType.CSS, cssStream);
            }

            // DOwnload cover image from URL: novel.Cover
            if (!string.IsNullOrEmpty(novel.Cover))
            {
                using (var coverStream = await DownloadImage(novel.Cover))
                {
                    doc.AddResource("cover.jpg", EpubResourceType.JPEG, (Stream)coverStream, true);
                }
            }

            // Cover page
            string htmlCover = @$"
                <div class=""cover-page"">
                    <img src=""cover.jpg"" alt=""{title}"" class=""cover-image"" style=""text-align: center;"" />
                    <div class=""title"">{title}</div>
                    <div class=""author"">{author}</div>
                    <div class=""categories""{categories}</div>
                    <hr>
                    <div class=""chapters"">{chaptersRange}</div>
                    <div class=""source"">Nguồn: {source}</a></div>
                    <div class=""copyright"">Generated by <a href=""https://github.com/git03-Nguyen/Novels-Collector-BE"">Group 12</a></div>
                </div>
                ";
            doc.AddSection("Trang bìa", htmlCover, "custom.css");

            // Adding sections of HTML content
            foreach (var chapter in novel.Chapters)
            {
                if (chapter == null || string.IsNullOrEmpty(chapter.Content)) continue;
                var chapterTitle = $"Chương {chapter.Number}";
                var chapterContent = $"<h2>Chương {chapter.Number}: {chapter.Title}</h2>";
                doc.AddSection(chapterTitle, $"{chapterContent}<p>{chapter.Content}</p>");
            }

            // Export the result to the stream
            doc.Export(stream);
        }

        private async Task<IDisposable> DownloadImage(string cover)
        {
            var client = new HttpClient();
            var response = await client.GetAsync(cover);
            return response.IsSuccessStatusCode ? await response.Content.ReadAsStreamAsync() : null;
        }
    }
}
