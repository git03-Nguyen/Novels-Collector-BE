using GroupDocs.Editor;
using GroupDocs.Editor.Options;
using NovelsCollector.SDK.Models;
using NovelsCollector.SDK.Models.Plugins;
using NovelsCollector.SDK.Plugins.ExporterPlugins;
using System.Reflection;
using System.Text;

namespace Exporter.SimpleMobi
{
    public class SimpleMobi : IExporterPlugin
    {
        public SimpleMobi() { }

        public async Task Export(Novel novel, Stream stream)
        {
            if (novel == null || novel.Chapters == null || novel.Chapters.Length == 0)
            {
                throw new ArgumentNullException(nameof(novel));
            }

            var title = (novel.Title != null) ? novel.Title : "Không tựa đề";
            var author = (novel.Authors != null && novel.Authors.Length > 0) ? novel.Authors[0].Name : "Khuyết danh";
            var categories = (novel.Categories != null && novel.Categories.Length > 0) ?
                string.Join(" | ", novel.Categories.Take(3).Select(c => c.Title)) :
                "Không thể loại";
            var startChapter = (novel.Chapters != null && novel.Chapters.Length > 0) ? novel.Chapters[0].Number : 1;
            var lastChapter = (novel.Chapters != null && novel.Chapters.Length > 0) ? novel.Chapters[^1].Number : 1;
            var chaptersRange = (startChapter == lastChapter) ? $"Chương {startChapter}" : $"Chương {startChapter} - Chương {lastChapter}";
            var source = (novel.Source != null) ? novel.Source : "Không rõ";

            var rootPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            var tempPath = Path.Combine(rootPath, "temp");
            if (!Directory.Exists(tempPath)) Directory.CreateDirectory(tempPath);
            var sourcePath = Path.Combine(tempPath, novel.Source);
            if (!Directory.Exists(sourcePath)) Directory.CreateDirectory(sourcePath);

            // Download cover image from URL: novel.Cover into temp/{novel.Source}/{novel.Slug.jpg}
            var coverPath = Path.Combine(sourcePath, $"{novel.Slug}.jpg");
            if (!string.IsNullOrEmpty(novel.Cover))
            {
                using (var coverStream = await DownloadImage(novel.Cover))
                {
                    if (coverStream != null)
                    {
                        using (var fileStream = File.Create(coverPath))
                        {
                            coverStream.CopyTo(fileStream);
                        }
                    }
                }
            }

            // Cover page
            string htmlCover = @$"
                <div style=""text-align: center; padding-top: 10%; padding: 20px; page-break-after: always;"">
                    <div style=""font-size: 4em;"">‎‎</div>
                    <img src=""./{novel.Slug}.jpg"" style=""text-align: center; height: 30%; border-radius: 5px; margin-top: 3em;"" />
                    <h1 style=""font-size: 1.8em; font-weight: bold;"">{title}</h1>
                    <div style=""font-size: 1.5em;"">{author}</div>
                    <div style=""font-size: 1.2em; color: #666; margin-bottom: 20px;"">{categories}</div>
                    <hr style=""border: none; border-top: 1px solid #ccc; margin: 1.3em 0;"" />
                    <div style=""font-size: 1.3em; margin-bottom: 20px;"">{chaptersRange}</div>
                    <div style=""font-size: 1.2em; color: #888; margin-bottom: 1em;"">Nguồn: {source}</a></div>
                    <div style=""font-size: 1em; color: #888; margin-top: 1.3em;"">Generated by <a href=""https://github.com/git03-Nguyen/Novels-Collector-BE"">Group 12</a></div>
                </div>
                ";

            // Stringbuilder
            var htmlBuilder = new StringBuilder();

            // Adding the HTML header
            htmlBuilder.Append(@"
                <!DOCTYPE html>
                <html lang=""en"">
                <body style="""">
            ");

            // Adding the cover page
            htmlBuilder.Append(htmlCover);

            // Adding chapters
            foreach (var chapter in novel.Chapters)
            {
                if (chapter == null || string.IsNullOrEmpty(chapter.Content)) continue;
                var chapterTitle = @$"<h2 style=""font-size: 1.3em"">Chương {chapter.Number}: {chapter.Title}</h2>";
                htmlBuilder.Append("<div  style=\"page-break-after: always;\">");
                htmlBuilder.Append(chapterTitle);
                htmlBuilder.Append($"<p>{chapter.Content}</p>");
                htmlBuilder.Append("</div>");
            }

            // Adding the HTML footer
            htmlBuilder.Append(@"
                </body>
                </html>");

            // Export the result to the stream
            var chapterFullHtml = htmlBuilder.ToString();
            using (EditableDocument document = EditableDocument.FromMarkupAndResourceFolder(chapterFullHtml, sourcePath))
            {
                using (Editor editor = new Editor("support.html"))
                {
                    var options = new EbookSaveOptions(GroupDocs.Editor.Formats.EBookFormats.Mobi);
                    editor.Save(document, stream, options);
                }
            }

        }

        private async Task<Stream> DownloadImage(string cover)
        {
            var client = new HttpClient();
            var response = await client.GetAsync(cover);
            return response.IsSuccessStatusCode ? await response.Content.ReadAsStreamAsync() : null;
        }
    }
}